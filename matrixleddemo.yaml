# Example for some matrix led effects, especially a scrolling clock/mqtt text display
# set the text via:
#  mosquitto_pub -h mqtthost -t text/text -m "Hi there!"

substitutions:
  devicename: leggedlamp  
  xscrollpadding: "4" # in pix

  
esphome:
  name: $devicename
  platform: ESP32
  board: esp32dev
  on_boot:
    priority: -10
    then: # stop the flickering
      - lambda: |-
            fastled_base_fastledlightoutput->get_controller()->setDither(0);

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

mqtt:
  id: mqtt_client
  broker: !secret mqtt_broker
#  username: !secret mqtt_user 
#  password: !secret mqtt_password


text_sensor:
  - platform: mqtt_subscribe
    name: "Text"
    id: extratext
    topic: text/text


logger:

debug:

ota:

font:
  - id: tinyfont
    file: "DejaVuSans-Bold.ttf"
    size: 9
    glyphs: '♡Ωäöüß!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'

time:
  - platform: sntp
    id: rtctime

light:
  - platform: fastled_clockless
    chipset: SK6812
    pin: GPIO26
    num_leds: 64
    rgb_order: GRB
    name: "$devicename Light"
    id: mylight
    color_correct: [40%, 40%, 40%]
   
display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: mylight
    width: 8
    height: 8
    rotation: 270°
#    use a pixel mapper, if needed (cf. https://esphome.io/components/display/addressable_light.html) 
#    pixel_mapper: |-
#        if (x % 2 == 0) {
#        return (x * 8) + y;
#        }
#        return (x * 8) + (7 - y);
    update_interval: 200ms
    lambda: |-
          static int16_t xpos = it.get_width();
          const char * text = id(led_matrix_text).state.c_str();
          
          auto color = Color(0, 0, 255);
          int x_start, y_start;
          int width, height;
          
          it.get_text_bounds(
            0, 0, text, id(tinyfont), 
            TextAlign::TOP_LEFT,
            &x_start, &y_start, &width, &height
          ); 
          
          if(xpos < -1 * (width + $xscrollpadding)) {
            xpos = it.get_width();
          }
          
          if(width <= it.get_width()) {
            xpos = 0;
          }
          
          it.print(
            xpos,
            2, 
            id(tinyfont),
            color, 
            TextAlign::TOP_LEFT,
            text
          ); 
          xpos--;
          


